import numpy as np

from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection


def robotindependentmapping(kappa: np.ndarray[float], phi: np.ndarray[float], ell: np.ndarray[float], pts_per_seg: np.ndarray[int]) -> np.ndarray[float]:
    """
    ROBOTINDEPENDENTMAPPING creates a framed curve for given configuration parameters

    Example
    -------
    g = robotindependentmapping([1/40e-3;1/10e-3],[0,pi],[25e-3,20e-3],10)
    creates a 2-segment curve with radius of curvatures 1/40 and 1/10
    and segment lengths 25 and 20, where the second segment is rotated by pi rad.

    Parameters
    ------
    kappa: ndarray
        (nx1) segment curvatures
    phi: ndarray
        (nx1) segment bending plane angles
    l: ndarray
        (nx1) segment lengths
    pts_per_seg: ndarray
        (nx1) number of points per segment
            if n=1 all segments with equal number of points

    Returns
    -------
    g : ndarray
        (mx16) backbone curve with m 4x4 transformation matrices, where m is
            total number of points, reshaped into 1x16 vector (columnwise)

    Author: Jessica Burgner-Kahrs <jbk@cs.toronto.edu>
    Date: 2022/02/16
    Version: 0.2
    Copyright: 2023 Continuum Robotics Laboratory, University of Toronto
    """

    if kappa.shape != phi.shape or kappa.shape != ell.shape:
        raise ValueError("Dimension mismatch.")

    numseg = kappa.size
    if pts_per_seg.size == 1 and numseg > 1: # If same number of points per segment
        pts_per_seg = np.tile(pts_per_seg, numseg)  # Create an array that is numseg long with the num points repeated

    g = np.zeros((np.sum(pts_per_seg), 16))  # Stores the transformation matrices of all the points in all the segments as rows

    p_count = 0  # Points counter
    T_base = np.eye(4)  # base starts off as identity
    for i in range(numseg):
        c_p = np.cos(phi[i])
        s_p = np.sin(phi[i])

        for j in range(pts_per_seg[i]):
            c_ks = np.cos(kappa[i] * j * (ell[i]/pts_per_seg[i]))
            s_ks = np.sin(kappa[i] * j * (ell[i]/pts_per_seg[i]))

            T_temp = np.array([
                [ c_p*c_p*(c_ks-1) + 1, s_p*c_p*(c_ks-1),        c_p*s_ks, 0],
                [ s_p*c_p*(c_ks-1),     c_p*c_p*(1-c_ks) + c_ks, s_p*s_ks, 0],
                [-c_p*s_ks,            -s_p*s_ks,                c_ks,     0],
                [ 0,                    0,                       0,        0]
            ])

            if kappa[i] != 0:
                T_temp[:, 3] = [(c_p*(1-c_ks))/kappa[i], (s_p*(1-c_ks))/kappa[i], s_ks/kappa[i], 1]
            else:  # To avoid division by zero
                T_temp[:, 3] = [0, 0, j*(ell[i]/pts_per_seg[i]), 1]

            g[p_count, :] = (T_base @ T_temp).T.reshape((1, 16))  # A matlab reshape is column-wise and not row-wise
            p_count += 1

        T_base = g[p_count - 1, :].reshape(4, 4).T  # lastmost point's transformation matrix is the new base

    return g


if __name__ == "__main__":
    # g value from Matlab code
    g_true = np.array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.9985, 0.0, -0.0555, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0555, 0.0, 0.9985, 0.0, 0.0, 0.0, 0.0017, 1.0, 0.9938, 0.0, -0.1109, 0.0, 0.0, 1.0, 0.0, 0.0, 0.1109, 0.0, 0.9938, 0.0, 0.0002, 0.0, 0.0033, 1.0, 0.9861, 0.0, -0.1659, 0.0, 0.0, 1.0, 0.0, 0.0, 0.1659, 0.0, 0.9861, 0.0, 0.0004, 0.0, 0.005, 1.0, 0.9754, 0.0, -0.2204, 0.0, 0.0, 1.0, 0.0, 0.0, 0.2204, 0.0, 0.9754, 0.0, 0.0007, 0.0, 0.0066, 1.0, 0.9617, 0.0, -0.2742, 0.0, 0.0, 1.0, 0.0, 0.0, 0.2742, 0.0, 0.9617, 0.0, 0.0011, 0.0, 0.0082, 1.0, 0.945, 0.0, -0.3272, 0.0, 0.0, 1.0, 0.0, 0.0, 0.3272, 0.0, 0.945, 0.0, 0.0017, 0.0, 0.0098, 1.0, 0.9253, 0.0, -0.3792, 0.0, 0.0, 1.0, 0.0, 0.0, 0.3792, 0.0, 0.9253, 0.0, 0.0022, 0.0, 0.0114, 1.0, 0.9028, 0.0, -0.43, 0.0, 0.0, 1.0, 0.0, 0.0, 0.43, 0.0, 0.9028, 0.0, 0.0029, 0.0, 0.0129, 1.0, 0.8776, 0.0, -0.4794, 0.0, 0.0, 1.0, 0.0, 0.0, 0.4794, 0.0, 0.8776, 0.0, 0.0037, 0.0, 0.0144, 1.0, 0.8496, 0.0, -0.5274, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5274, 0.0, 0.8496, 0.0, 0.0045, 0.0, 0.0158, 1.0, 0.819, 0.0, -0.5738, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5738, 0.0, 0.819, 0.0, 0.0054, 0.0, 0.0172, 1.0, 0.7859, 0.0, -0.6184, 0.0, 0.0, 1.0, 0.0, 0.0, 0.6184, 0.0, 0.7859, 0.0, 0.0064, 0.0, 0.0186, 1.0, 0.7503, 0.0, -0.6611, 0.0, 0.0, 1.0, 0.0, 0.0, 0.6611, 0.0, 0.7503, 0.0, 0.0075, 0.0, 0.0198, 1.0, 0.7125, 0.0, -0.7017, 0.0, 0.0, 1.0, 0.0, 0.0, 0.7017, 0.0, 0.7125, 0.0, 0.0086, 0.0, 0.0211, 1.0, 0.6724, 0.0, -0.7402, 0.0, 0.0, 1.0, 0.0, 0.0, 0.7402, 0.0, 0.6724, 0.0, 0.0098, 0.0, 0.0222, 1.0, 0.6303, 0.0, -0.7764, 0.0, 0.0, 1.0, 0.0, 0.0, 0.7764, 0.0, 0.6303, 0.0, 0.0111, 0.0, 0.0233, 1.0, 0.5862, 0.0, -0.8102, 0.0, 0.0, 1.0, 0.0, 0.0, 0.8102, 0.0, 0.5862, 0.0, 0.0124, 0.0, 0.0243, 1.0, 0.5403, 0.0, -0.8415, 0.0, 0.0, 1.0, 0.0, 0.0, 0.8415, 0.0, 0.5403, 0.0, 0.0138, 0.0, 0.0252, 1.0, 0.4927, 0.0, -0.8702, 0.0, 0.0, 1.0, 0.0, 0.0, 0.8702, 0.0, 0.4927, 0.0, 0.0152, 0.0, 0.0261, 1.0, 0.4437, 0.0, -0.8962, 0.0, 0.0, 1.0, 0.0, 0.0, 0.8962, 0.0, 0.4437, 0.0, 0.0167, 0.0, 0.0269, 1.0, 0.3932, 0.0, -0.9194, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9194, 0.0, 0.3932, 0.0, 0.0182, 0.0, 0.0276, 1.0, 0.3416, 0.0, -0.9399, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9399, 0.0, 0.3416, 0.0, 0.0198, 0.0, 0.0282, 1.0, 0.2888, 0.0, -0.9574, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9574, 0.0, 0.2888, 0.0, 0.0213, 0.0, 0.0287, 1.0, 0.2352, 0.0, -0.9719, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9719, 0.0, 0.2352, 0.0, 0.0229, 0.0, 0.0292, 1.0, 0.1809, 0.0, -0.9835, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9835, 0.0, 0.1809, 0.0, 0.0246, 0.0, 0.0295, 1.0, 0.126, 0.0, -0.992, 0.0, 0.0, 1.0, 0.0, 0.0, 0.992, 0.0, 0.126, 0.0, 0.0262, 0.0, 0.0298, 1.0, 0.0707, 0.0, -0.9975, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9975, 0.0, 0.0707, 0.0, 0.0279, 0.0, 0.0299, 1.0, 0.0152, 0.0, -0.9999, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9999, 0.0, 0.0152, 0.0, 0.0295, 0.0, 0.03, 1.0, -0.0403, 0.0, -0.9992, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9992, 0.0, -0.0403, 0.0, 0.0312, 0.0, 0.03, 1.0, -0.0403, 0.0, -0.9992, 0.0, 0.0, 1.0, 0.0, 0.0, 0.9992, 0.0, -0.0403, 0.0, 0.0312, 0.0, 0.03, 1.0, 0.0145, 0.0005, -0.9999, 0.0, -0.0199, 0.9998, 0.0003, 0.0, 0.9997, 0.0199, 0.0145, 0.0, 0.0335, 0.0, 0.0299, 1.0, 0.0692, 0.0022, -0.9976, 0.0, -0.0399, 0.9992, -0.0006, 0.0, 0.9968, 0.0398, 0.0693, 0.0, 0.0359, 0.0001, 0.03, 1.0, 0.1237, 0.0049, -0.9923, 0.0, -0.0597, 0.9982, -0.0025, 0.0, 0.9905, 0.0595, 0.1238, 0.0, 0.0382, 0.0002, 0.0303, 1.0, 0.1778, 0.0087, -0.984, 0.0, -0.0794, 0.9968, -0.0055, 0.0, 0.9809, 0.0791, 0.1779, 0.0, 0.0405, 0.0004, 0.0306, 1.0, 0.2312, 0.0136, -0.9728, 0.0, -0.0988, 0.9951, -0.0096, 0.0, 0.9679, 0.0983, 0.2314, 0.0, 0.0428, 0.0006, 0.0311, 1.0, 0.2838, 0.0195, -0.9587, 0.0, -0.118, 0.9929, -0.0147, 0.0, 0.9516, 0.1173, 0.2841, 0.0, 0.045, 0.0008, 0.0317, 1.0, 0.3355, 0.0264, -0.9417, 0.0, -0.1368, 0.9904, -0.0209, 0.0, 0.9321, 0.1358, 0.3358, 0.0, 0.0472, 0.0011, 0.0324, 1.0, 0.3859, 0.0344, -0.9219, 0.0, -0.1551, 0.9875, -0.0281, 0.0, 0.9094, 0.1539, 0.3864, 0.0, 0.0494, 0.0015, 0.0333, 1.0, 0.4351, 0.0433, -0.8993, 0.0, -0.173, 0.9842, -0.0363, 0.0, 0.8836, 0.1714, 0.4357, 0.0, 0.0514, 0.0018, 0.0342, 1.0, 0.4828, 0.0531, -0.8741, 0.0, -0.1904, 0.9807, -0.0455, 0.0, 0.8548, 0.1884, 0.4835, 0.0, 0.0535, 0.0023, 0.0353, 1.0, 0.5288, 0.0639, -0.8464, 0.0, -0.2071, 0.9767, -0.0556, 0.0, 0.8231, 0.2047, 0.5297, 0.0, 0.0554, 0.0027, 0.0365, 1.0, 0.5729, 0.0756, -0.8161, 0.0, -0.2232, 0.9725, -0.0666, 0.0, 0.7886, 0.2203, 0.574, 0.0, 0.0573, 0.0032, 0.0378, 1.0, 0.6152, 0.0881, -0.7835, 0.0, -0.2386, 0.9679, -0.0785, 0.0, 0.7514, 0.2352, 0.6165, 0.0, 0.0591, 0.0037, 0.0392, 1.0, 0.6553, 0.1014, -0.7486, 0.0, -0.2532, 0.9631, -0.0912, 0.0, 0.7117, 0.2493, 0.6568, 0.0, 0.0608, 0.0043, 0.0406, 1.0, 0.6931, 0.1154, -0.7115, 0.0, -0.267, 0.958, -0.1047, 0.0, 0.6695, 0.2625, 0.6948, 0.0, 0.0624, 0.0049, 0.0422, 1.0, 0.7286, 0.1301, -0.6724, 0.0, -0.2799, 0.9526, -0.1189, 0.0, 0.6251, 0.2749, 0.7305, 0.0, 0.0639, 0.0055, 0.0439, 1.0, 0.7616, 0.1455, -0.6315, 0.0, -0.2919, 0.947, -0.1338, 0.0, 0.5785, 0.2863, 0.7638, 0.0, 0.0653, 0.0062, 0.0456, 1.0, 0.792, 0.1615, -0.5887, 0.0, -0.3029, 0.9412, -0.1494, 0.0, 0.53, 0.2967, 0.7944, 0.0, 0.0666, 0.0069, 0.0474, 1.0, 0.8197, 0.178, -0.5444, 0.0, -0.313, 0.9352, -0.1655, 0.0, 0.4797, 0.3061, 0.8223, 0.0, 0.0678, 0.0076, 0.0493, 1.0, 0.8446, 0.195, -0.4986, 0.0, -0.3221, 0.929, -0.1822, 0.0, 0.4277, 0.3145, 0.8474, 0.0, 0.0689, 0.0083, 0.0513, 1.0, 0.8666, 0.2125, -0.4516, 0.0, -0.3301, 0.9227, -0.1993, 0.0, 0.3743, 0.3218, 0.8697, 0.0, 0.0698, 0.009, 0.0533, 1.0, 0.8856, 0.2303, -0.4034, 0.0, -0.337, 0.9162, -0.2169, 0.0, 0.3196, 0.328, 0.889, 0.0, 0.0706, 0.0098, 0.0553, 1.0, 0.9016, 0.2484, -0.3542, 0.0, -0.3428, 0.9096, -0.2348, 0.0, 0.2638, 0.3331, 0.9052, 0.0, 0.0713, 0.0106, 0.0574, 1.0, 0.9145, 0.2668, -0.3042, 0.0, -0.3475, 0.9029, -0.253, 0.0, 0.2072, 0.337, 0.9184, 0.0, 0.0719, 0.0114, 0.0596, 1.0, 0.9243, 0.2853, -0.2535, 0.0, -0.3511, 0.8962, -0.2714, 0.0, 0.1498, 0.3399, 0.9285, 0.0, 0.0723, 0.0121, 0.0617, 1.0, 0.9309, 0.304, -0.2024, 0.0, -0.3535, 0.8894, -0.29, 0.0, 0.0919, 0.3415, 0.9354, 0.0, 0.0726, 0.0129, 0.0639, 1.0, 0.9344, 0.3227, -0.151, 0.0, -0.3547, 0.8825, -0.3087, 0.0, 0.0337, 0.342, 0.9391, 0.0, 0.0727, 0.0137, 0.0661, 1.0, 0.9346, 0.3415, -0.0995, 0.0, -0.3548, 0.8757, -0.3274, 0.0, -0.0246, 0.3414, 0.9396, 0.0, 0.0727, 0.0145, 0.0683, 1.0, 0.9317, 0.3601, -0.0481, 0.0, -0.3538, 0.8689, -0.3462, 0.0, -0.0829, 0.3395, 0.9369, 0.0, 0.0726, 0.0153, 0.0705, 1.0, 0.9317, 0.3601, -0.0481, 0.0, -0.3538, 0.8689, -0.3462, 0.0, -0.0829, 0.3395, 0.9369, 0.0, 0.0726, 0.0153, 0.0705, 1.0, 0.9348, 0.3428, -0.0929, 0.0, -0.3519, 0.8589, -0.372, 0.0, -0.0478, 0.3804, 0.9236, 0.0, 0.0725, 0.0156, 0.0712, 1.0, 0.9362, 0.3236, -0.1369, 0.0, -0.3511, 0.8478, -0.3975, 0.0, -0.0125, 0.4202, 0.9074, 0.0, 0.0725, 0.016, 0.072, 1.0, 0.936, 0.3024, -0.1801, 0.0, -0.3513, 0.8356, -0.4224, 0.0, 0.0228, 0.4586, 0.8883, 0.0, 0.0725, 0.0163, 0.0727, 1.0, 0.9341, 0.2794, -0.2224, 0.0, -0.3524, 0.8223, -0.4468, 0.0, 0.058, 0.4957, 0.8666, 0.0, 0.0725, 0.0167, 0.0735, 1.0, 0.9304, 0.2547, -0.2635, 0.0, -0.3545, 0.8081, -0.4705, 0.0, 0.093, 0.5312, 0.8421, 0.0, 0.0726, 0.0172, 0.0742, 1.0, 0.9251, 0.2284, -0.3033, 0.0, -0.3575, 0.7928, -0.4935, 0.0, 0.1278, 0.565, 0.8151, 0.0, 0.0727, 0.0176, 0.0749, 1.0, 0.9181, 0.2004, -0.3419, 0.0, -0.3616, 0.7767, -0.5158, 0.0, 0.1622, 0.5972, 0.7856, 0.0, 0.0728, 0.0181, 0.0755, 1.0, 0.9095, 0.1709, -0.3789, 0.0, -0.3665, 0.7597, -0.5372, 0.0, 0.196, 0.6274, 0.7536, 0.0, 0.073, 0.0186, 0.0762, 1.0, 0.8993, 0.1401, -0.4143, 0.0, -0.3725, 0.7418, -0.5576, 0.0, 0.2293, 0.6558, 0.7193, 0.0, 0.0731, 0.0191, 0.0768, 1.0, 0.8875, 0.1079, -0.4481, 0.0, -0.3793, 0.7233, -0.5771, 0.0, 0.2618, 0.6821, 0.6828, 0.0, 0.0733, 0.0197, 0.0774, 1.0, 0.8741, 0.0744, -0.48, 0.0, -0.387, 0.704, -0.5955, 0.0, 0.2936, 0.7063, 0.6442, 0.0, 0.0736, 0.0203, 0.0779, 1.0, 0.8592, 0.0399, -0.51, 0.0, -0.3956, 0.684, -0.6129, 0.0, 0.3244, 0.7284, 0.6035, 0.0, 0.0738, 0.0209, 0.0785, 1.0, 0.8429, 0.0044, -0.5381, 0.0, -0.405, 0.6635, -0.629, 0.0, 0.3542, 0.7481, 0.5611, 0.0, 0.0741, 0.0215, 0.0789, 1.0, 0.8252, -0.032, -0.564, 0.0, -0.4152, 0.6425, -0.644, 0.0, 0.383, 0.7656, 0.5169, 0.0, 0.0744, 0.0221, 0.0794, 1.0, 0.8061, -0.0692, -0.5878, 0.0, -0.4263, 0.621, -0.6577, 0.0, 0.4105, 0.7807, 0.4711, 0.0, 0.0748, 0.0228, 0.0798, 1.0, 0.7857, -0.1071, -0.6093, 0.0, -0.438, 0.5991, -0.6702, 0.0, 0.4368, 0.7934, 0.4238, 0.0, 0.0751, 0.0234, 0.0802, 1.0, 0.7641, -0.1455, -0.6285, 0.0, -0.4505, 0.577, -0.6813, 0.0, 0.4618, 0.8037, 0.3753, 0.0, 0.0755, 0.0241, 0.0805, 1.0, 0.7413, -0.1844, -0.6454, 0.0, -0.4637, 0.5545, -0.691, 0.0, 0.4853, 0.8115, 0.3255, 0.0, 0.0759, 0.0248, 0.0808, 1.0, 0.7174, -0.2236, -0.6598, 0.0, -0.4775, 0.5319, -0.6994, 0.0, 0.5073, 0.8168, 0.2748, 0.0, 0.0763, 0.0254, 0.0811, 1.0, 0.6925, -0.263, -0.6718, 0.0, -0.4919, 0.5092, -0.7063, 0.0, 0.5278, 0.8195, 0.2232, 0.0, 0.0767, 0.0261, 0.0813, 1.0, 0.6666, -0.3024, -0.6813, 0.0, -0.5068, 0.4864, -0.7118, 0.0, 0.5466, 0.8197, 0.171, 0.0, 0.0772, 0.0268, 0.0814, 1.0, 0.6399, -0.3418, -0.6883, 0.0, -0.5222, 0.4636, -0.7158, 0.0, 0.5638, 0.8174, 0.1182, 0.0, 0.0776, 0.0275, 0.0815, 1.0, 0.6124, -0.381, -0.6927, 0.0, -0.5381, 0.441, -0.7183, 0.0, 0.5792, 0.8126, 0.065, 0.0, 0.0781, 0.0282, 0.0816, 1.0, 0.5842, -0.42, -0.6945, 0.0, -0.5544, 0.4185, -0.7194, 0.0, 0.5928, 0.8053, 0.0117, 0.0, 0.0786, 0.0288, 0.0817, 1.0, 0.5554, -0.4585, -0.6938, 0.0, -0.571, 0.3963, -0.719, 0.0, 0.6046, 0.7955, -0.0417, 0.0, 0.0791, 0.0295, 0.0816, 1.0, 0.5261, -0.4965, -0.6905, 0.0, -0.5879, 0.3744, -0.7171, 0.0, 0.6145, 0.7832, -0.095, 0.0, 0.0796, 0.0302, 0.0816, 1.0, 0.4963, -0.5338, -0.6847, 0.0, -0.6051, 0.3528, -0.7137, 0.0, 0.6225, 0.7685, -0.1479, 0.0, 0.0801, 0.0308, 0.0815, 1.0, 0.4662, -0.5704, -0.6763, 0.0, -0.6225, 0.3317, -0.7089, 0.0, 0.6286, 0.7514, -0.2004, 0.0, 0.0806, 0.0314, 0.0813, 1.0, 0.4358, -0.6061, -0.6654, 0.0, -0.64, 0.3111, -0.7026, 0.0, 0.6328, 0.7321, -0.2523, 0.0, 0.0812, 0.0321, 0.0812, 1.0]).reshape((90, 16))

    kappa = np.array([1/30e-3, 1/40e-3, 1/15e-3])
    phi = np.array([0, np.deg2rad(160), np.deg2rad(30)])
    ell = np.array([50e-3, 70e-3, 25e-3])
    pts_per_seg = np.array([30])

    g = robotindependentmapping(kappa, phi, ell, pts_per_seg)
    t = np.abs(g_true - g)
    print(np.all(t < 1e-4))  # Matlab provides upto 4 significant digits of accuracy